// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VSHCTwebApp.Data;

#nullable disable

namespace VSHCTwebApp.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250516172354_AddUserFields")]
    partial class AddUserFields
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("VSHCTwebApp.Components.Models.Competence", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Competence", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = "ProgrammingLanguage",
                            Name = "C#"
                        },
                        new
                        {
                            Id = 2,
                            Category = "ProgrammingLanguage",
                            Name = "JavaScript"
                        },
                        new
                        {
                            Id = 3,
                            Category = "Framework",
                            Name = "ASP.NET Core"
                        },
                        new
                        {
                            Id = 4,
                            Category = "Framework",
                            Name = "React"
                        },
                        new
                        {
                            Id = 5,
                            Category = "Database",
                            Name = "SQL"
                        },
                        new
                        {
                            Id = 6,
                            Category = "Database",
                            Name = "PostgreSQL"
                        },
                        new
                        {
                            Id = 7,
                            Category = "DevOps",
                            Name = "Docker"
                        },
                        new
                        {
                            Id = 8,
                            Category = "DevOps",
                            Name = "Kubernetes"
                        },
                        new
                        {
                            Id = 9,
                            Category = "ProgrammingLanguage",
                            Name = "PHP"
                        },
                        new
                        {
                            Id = 10,
                            Category = "ProgrammingLanguage",
                            Name = "Blueprint"
                        },
                        new
                        {
                            Id = 11,
                            Category = "ProgrammingLanguage",
                            Name = "GOLANG"
                        },
                        new
                        {
                            Id = 12,
                            Category = "ProgrammingLanguage",
                            Name = "Rust"
                        },
                        new
                        {
                            Id = 13,
                            Category = "ProgrammingLanguage",
                            Name = "Flatter"
                        },
                        new
                        {
                            Id = 14,
                            Category = "ProgrammingLanguage",
                            Name = "Dart"
                        },
                        new
                        {
                            Id = 15,
                            Category = "ProgrammingLanguage",
                            Name = "R Lang"
                        },
                        new
                        {
                            Id = 16,
                            Category = "ProgrammingLanguage",
                            Name = "Java"
                        },
                        new
                        {
                            Id = 17,
                            Category = "ProgrammingLanguage",
                            Name = "HTML"
                        },
                        new
                        {
                            Id = 18,
                            Category = "ProgrammingLanguage",
                            Name = "CSS"
                        },
                        new
                        {
                            Id = 19,
                            Category = "ProgrammingLanguage",
                            Name = "C++"
                        },
                        new
                        {
                            Id = 20,
                            Category = "ProgrammingLanguage",
                            Name = "Next"
                        },
                        new
                        {
                            Id = 21,
                            Category = "ProgrammingLanguage",
                            Name = "Julia"
                        },
                        new
                        {
                            Id = 22,
                            Category = "ProgrammingLanguage",
                            Name = "TypeScript"
                        },
                        new
                        {
                            Id = 23,
                            Category = "ProgrammingLanguage",
                            Name = "Python"
                        },
                        new
                        {
                            Id = 24,
                            Category = "ProgrammingLanguage",
                            Name = "SWIFT"
                        },
                        new
                        {
                            Id = 25,
                            Category = "ProgrammingLanguage",
                            Name = "KOTLIN"
                        },
                        new
                        {
                            Id = 26,
                            Category = "ProgrammingLanguage",
                            Name = "XAML"
                        },
                        new
                        {
                            Id = 27,
                            Category = "ProgrammingLanguage",
                            Name = "Scss"
                        },
                        new
                        {
                            Id = 28,
                            Category = "ProgrammingLanguage",
                            Name = "Ruby"
                        },
                        new
                        {
                            Id = 29,
                            Category = "Framework",
                            Name = "Unreal Engine GameMode"
                        },
                        new
                        {
                            Id = 30,
                            Category = "Framework",
                            Name = "SpringBoot"
                        },
                        new
                        {
                            Id = 31,
                            Category = "Framework",
                            Name = "Keras"
                        },
                        new
                        {
                            Id = 32,
                            Category = "Framework",
                            Name = "Scikit Learn"
                        },
                        new
                        {
                            Id = 33,
                            Category = "Framework",
                            Name = "Pandas"
                        },
                        new
                        {
                            Id = 34,
                            Category = "Framework",
                            Name = "TensorFlow"
                        },
                        new
                        {
                            Id = 35,
                            Category = "Framework",
                            Name = "PyTorch"
                        },
                        new
                        {
                            Id = 36,
                            Category = "Framework",
                            Name = "Vue"
                        },
                        new
                        {
                            Id = 37,
                            Category = "Framework",
                            Name = "PhalconPHP"
                        },
                        new
                        {
                            Id = 38,
                            Category = "Framework",
                            Name = "FastAPI"
                        },
                        new
                        {
                            Id = 39,
                            Category = "Framework",
                            Name = "Flutter"
                        },
                        new
                        {
                            Id = 40,
                            Category = "Framework",
                            Name = "1C"
                        },
                        new
                        {
                            Id = 41,
                            Category = "Framework",
                            Name = "ReactJS"
                        },
                        new
                        {
                            Id = 42,
                            Category = "Framework",
                            Name = "NestJS"
                        },
                        new
                        {
                            Id = 43,
                            Category = "Framework",
                            Name = "Node.js"
                        },
                        new
                        {
                            Id = 44,
                            Category = "Framework",
                            Name = "Next.js"
                        },
                        new
                        {
                            Id = 45,
                            Category = "Framework",
                            Name = ".NET MAUI"
                        },
                        new
                        {
                            Id = 46,
                            Category = "Framework",
                            Name = ".NET 6.0"
                        },
                        new
                        {
                            Id = 47,
                            Category = "Framework",
                            Name = "Django"
                        },
                        new
                        {
                            Id = 48,
                            Category = "Framework",
                            Name = "Unreal Engine"
                        },
                        new
                        {
                            Id = 49,
                            Category = "Framework",
                            Name = "NumPy"
                        },
                        new
                        {
                            Id = 50,
                            Category = "Framework",
                            Name = "ReactNative"
                        },
                        new
                        {
                            Id = 51,
                            Category = "Framework",
                            Name = "Flask"
                        },
                        new
                        {
                            Id = 52,
                            Category = "Framework",
                            Name = "Tailwind"
                        },
                        new
                        {
                            Id = 53,
                            Category = "Framework",
                            Name = "Bootstrap"
                        },
                        new
                        {
                            Id = 54,
                            Category = "Framework",
                            Name = "Ruby on Rails"
                        },
                        new
                        {
                            Id = 55,
                            Category = "Framework",
                            Name = "Jest"
                        },
                        new
                        {
                            Id = 56,
                            Category = "Framework",
                            Name = "Mocha"
                        },
                        new
                        {
                            Id = 57,
                            Category = "Framework",
                            Name = "Cypress"
                        },
                        new
                        {
                            Id = 58,
                            Category = "Framework",
                            Name = "Selenium"
                        },
                        new
                        {
                            Id = 59,
                            Category = "Database",
                            Name = "SQLite"
                        },
                        new
                        {
                            Id = 60,
                            Category = "Database",
                            Name = "FireBase"
                        },
                        new
                        {
                            Id = 61,
                            Category = "Database",
                            Name = "Redis"
                        },
                        new
                        {
                            Id = 62,
                            Category = "Database",
                            Name = "MySQL"
                        },
                        new
                        {
                            Id = 63,
                            Category = "Database",
                            Name = "TypeORM"
                        },
                        new
                        {
                            Id = 64,
                            Category = "Database",
                            Name = "SQL1"
                        },
                        new
                        {
                            Id = 65,
                            Category = "Database",
                            Name = "MongoDB"
                        },
                        new
                        {
                            Id = 66,
                            Category = "DevOps",
                            Name = "Elasticsearch"
                        },
                        new
                        {
                            Id = 67,
                            Category = "DevOps",
                            Name = "Prometheus"
                        },
                        new
                        {
                            Id = 68,
                            Category = "DevOps",
                            Name = "Grafana"
                        },
                        new
                        {
                            Id = 69,
                            Category = "DevOps",
                            Name = "Git"
                        });
                });

            modelBuilder.Entity("VSHCTwebApp.Components.Models.UserCompetence", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CompetenceId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.HasKey("UserId", "CompetenceId");

                    b.HasIndex("CompetenceId");

                    b.ToTable("UserCompetence");
                });

            modelBuilder.Entity("VSHCTwebApp.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Group")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("VSHCTwebApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("VSHCTwebApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VSHCTwebApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("VSHCTwebApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VSHCTwebApp.Components.Models.UserCompetence", b =>
                {
                    b.HasOne("VSHCTwebApp.Components.Models.Competence", "Competence")
                        .WithMany("UserCompetences")
                        .HasForeignKey("CompetenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VSHCTwebApp.Data.ApplicationUser", "User")
                        .WithMany("UserCompetences")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Competence");

                    b.Navigation("User");
                });

            modelBuilder.Entity("VSHCTwebApp.Components.Models.Competence", b =>
                {
                    b.Navigation("UserCompetences");
                });

            modelBuilder.Entity("VSHCTwebApp.Data.ApplicationUser", b =>
                {
                    b.Navigation("UserCompetences");
                });
#pragma warning restore 612, 618
        }
    }
}
