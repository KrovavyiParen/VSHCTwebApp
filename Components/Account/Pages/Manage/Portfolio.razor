@page "/Account/Manage/Portfolio"
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using System.Security.Claims
@using VSHCTwebApp.Components.Models
@using VSHCTwebApp.Data
@inject IDbContextFactory<VSHCTwebApp.Data.VSHCTwebAppContext> DbFactory
@inject AuthenticationStateProvider AuthProvider


<h3>Портфолио</h3>

<h4>Идеи</h4>
@if (notes == null)
{
    <p>Загрузка...</p>
}
else
{
    <QuickGrid Class="table" Items="@notes.AsQueryable()" Pagination="@pagination" TGridItem="Note">

        <TemplateColumn Title="Название" Context="note">
            <a href="@($"notes/details?id={note.Id}")" class="text-decoration-none">@note.Title</a>
        </TemplateColumn>

        <TemplateColumn Title="Дата создания" Context="note">
            @note.CreatedAt.ToString("g")
        </TemplateColumn>

    </QuickGrid>
}

<h4>Команды</h4>
@if (commands == null)
{
    <p>Загрузка команд...</p>
}
else if (!commands.Any())
{
    <p>Пользователь не состоит в команде</p>
}
else
{
    <QuickGrid Class="table" Items="@commands.AsQueryable()" Pagination="@pagination" TGridItem="Command">
        <TemplateColumn Title="Название команды" Context="command">
            <a href="@($"commands/details?id={command.Id}")" class="text-decoration-none">@command.Name</a>
        </TemplateColumn>
        <TemplateColumn Title="Роль" Context="command">
            @GetUserRole(command.Id) 
        </TemplateColumn>
    </QuickGrid>
}

@code {
    private List<Note>? notes;
    private List<Command>? commands;
    private PaginationState pagination = new() { ItemsPerPage = 10 };
    private string? currentUserId;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthProvider.GetAuthenticationStateAsync();
        var userName = authState.User.FindFirstValue(ClaimTypes.Name);
        currentUserId = authState.User.FindFirstValue(ClaimTypes.NameIdentifier);

        using var context = DbFactory.CreateDbContext();
        notes = await context.Note
            .Where(i => i.CreatedByEmail == userName)
            .OrderByDescending(i => i.CreatedAt)
            .ToListAsync();

        commands = await context.TeamMembers
            .Where(tm => tm.UserId == currentUserId) // Используем UserId для связи
            .Include(tm => tm.Command) // Важно: подгружаем связанные команды
            .Select(tm => tm.Command)
            .Distinct()
            .ToListAsync();

    }

    private string GetUserRole(int commandId)
    {
        return "Участник"; // Заглушка
    }
}
