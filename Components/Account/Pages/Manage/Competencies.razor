@page "/Account/Manage/competencies"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore
@using System.Security.Claims
@using VSHCTwebApp.Components.Models
@using VSHCTwebApp.Data
@attribute [Authorize]
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IDbContextFactory<ApplicationDbContext> DbContextFactory



<h3>Мои компетенции</h3>

<div class="row mt-4">
    <div class="col-md-6">
        <dl class="row">
            <dt class="col-sm-4">Языки программирования:</dt>
            <dd class="col-sm-8">
                @if (editingField == "lang")
                {
                    <div class="mb-3">
                        <select class="form-select" multiple @onchange="HandleLanguagesChange">
                            @foreach (var lang in availableLanguages)
                            {
                                <option value="@lang" selected="@(selectedLanguages.Contains(lang))">@lang</option>
                            }
                        </select>
                        <button class="btn btn-sm btn-success mt-2" @onclick="SaveChanges">
                            <i class="bi bi-check"></i> Сохранить
                        </button>
                        <button class="btn btn-sm btn-secondary mt-2 ms-2" @onclick="CancelEdit">
                            <i class="bi bi-x"></i> Отмена
                        </button>
                    </div>
                }
                else
                {
                    <div>
                        @if (userCompetencies?.ProgrammingLanguages?.Any() == true)
                        {
                            <div class="badge-container">
                                <div class="d-flex flex-wrap gap-2">
                                    @foreach (var lang in userCompetencies.ProgrammingLanguages)
                                    {
                                        <span class="badge bg-primary">@lang</span>
                                    }
                                </div>
                            </div>
                        }
                        else
                        {
                            <span class="text-muted">Не указано</span>
                        }
                        
                    </div>
                }
            </dd>
            @if (editingField != "lang")
            {
                <button class="btn btn-sm btn-outline-primary ms-2" @onclick='() => StartEdit("lang")'>
                    <i class="bi bi-pencil"></i> Изменить
                </button>
            }
            <dt class="col-sm-4">Стек технологий:</dt>
            <dd class="col-sm-8">
                @if (editingField == "tech")
                {
                    <div class="mb-3">
                        <select class="form-select" multiple @onchange="HandleTechStackChange">
                            @foreach (var tech in availableTechnologies)
                            {
                                <option value="@tech" selected="@(selectedTechStack.Contains(tech))">@tech</option>
                            }
                        </select>
                        <button class="btn btn-sm btn-success mt-2" @onclick="SaveChanges">
                            <i class="bi bi-check"></i> Сохранить
                        </button>
                        <button class="btn btn-sm btn-secondary mt-2 ms-2" @onclick="CancelEdit">
                            <i class="bi bi-x"></i> Отмена
                        </button>
                    </div>
                }
                else
                {
                    <div>
                        @if (userCompetencies?.TechStack?.Any() == true)
                        {
                            <div class="badge-container">
                                <div class="d-flex flex-wrap gap-2">
                                    @foreach (var tech in userCompetencies.TechStack)
                                    {
                                        <span class="badge bg-primary">@tech</span>
                                    }
                                </div>
                            </div>
                        }
                        else
                        {
                            <span class="text-muted">Не указано</span>
                        }
                        
                    </div>
                }
            </dd>
            @if (editingField != "tech")
                {
                <button class="btn btn-sm btn-outline-primary ms-2" @onclick='() => StartEdit("tech")'>
                    <i class="bi bi-pencil"></i> Изменить
                </button>
                }
        </dl>
    </div>
</div>

@code {
    @rendermode InteractiveServer
    private string? editingField = null;
    private List<string> selectedTechStack = new();
    private List<string> selectedLanguages = new();

    private readonly List<string> availableTechnologies = new()
    {
        "React", "Angular", "Vue.js", "Node.js", "ASP.NET Core",
        "Docker", "Kubernetes", "AWS", "Azure", "SQL",
        "MongoDB", "Redis", "RabbitMQ", "Git", "CI/CD"
    };

    private readonly List<string> availableLanguages = new()
    {
        "JavaScript", "TypeScript", "Python", "C#", "Java",
        "Go", "PHP", "Ruby", "Swift", "Kotlin",
        "Rust", "C++", "SQL", "HTML/CSS", "Dart"
    };

    private UserCompetencies? userCompetencies;
    private string? userId;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        userId = authState.User.FindFirstValue(ClaimTypes.NameIdentifier);

        await LoadUserCompetencies();
    }

    private async Task LoadUserCompetencies()
    {
        using var context = DbContextFactory.CreateDbContext();
        userCompetencies = await context.UserCompetencies
            .AsNoTracking()
            .FirstOrDefaultAsync(uc => uc.UserId == userId);

        if (userCompetencies == null)
        {
            userCompetencies = new UserCompetencies
                {
                    UserId = userId,
                    TechStack = new List<string>(),
                    ProgrammingLanguages = new List<string>()
                };
            context.UserCompetencies.Add(userCompetencies);
            await context.SaveChangesAsync();
        }
    }

    private void StartEdit(string fieldType)
    {
        editingField = fieldType;
    }

    private void HandleTechStackChange(ChangeEventArgs e)
    {
        var selectedValues = e.Value as IEnumerable<string>;
        if (selectedValues != null)
        {
            selectedTechStack = selectedValues.ToList();
        }
    }

    private void HandleLanguagesChange(ChangeEventArgs e)
    {
        var selectedValues = e.Value as IEnumerable<string>;
        if (selectedValues != null)
        {
            selectedLanguages = selectedValues.ToList();
        }
    }

    private async Task SaveChanges()
    {
        if (userCompetencies == null) return;

        using var context = DbContextFactory.CreateDbContext();

        if (editingField == "tech")
        {
            userCompetencies.TechStack = selectedTechStack;
        }
        else if (editingField == "lang")
        {
            userCompetencies.ProgrammingLanguages = selectedLanguages;
        }

        context.UserCompetencies.Update(userCompetencies);
        await context.SaveChangesAsync();

        editingField = null;
    }

    private void CancelEdit()
    {
        editingField = null;
        selectedTechStack = userCompetencies?.TechStack?.ToList() ?? new List<string>();
        selectedLanguages = userCompetencies?.ProgrammingLanguages?.ToList() ?? new List<string>();
    }
}