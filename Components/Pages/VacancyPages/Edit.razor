@page "/vacancy/edit"
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.EntityFrameworkCore
@using VSHCTwebApp.Components.Models
@using VSHCTwebApp.Data
@inject IDbContextFactory<VSHCTwebAppContext> DbFactory
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<ApplicationUser> UserManager
@inject IJSRuntime JSRuntime

@if (isLoading)
{
    <div class="text-center mt-5">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        <p>Загрузка вакансии...</p>
    </div>
}
else if (errorMessage != null)
{
    <div class="alert alert-danger mt-4">
        @errorMessage
        <button class="btn btn-sm btn-secondary ms-2" @onclick="() => errorMessage = null">Закрыть</button>
    </div>
}
else if (Vacancy == null)
{
    <div class="alert alert-warning mt-4">
        Вакансия не найдена
        <a href="/vacancy" class="btn btn-sm btn-secondary ms-2">Вернуться к списку</a>
    </div>
}
else
{
    <div class="container mt-4">
        <div class="card">
            <div class="card-header bg-primary text-white">
                <h2>Редактирование вакансии</h2>
            </div>

            <div class="card-body">
                <EditForm Model="@Vacancy" OnValidSubmit="@UpdateVacancy">
                    <DataAnnotationsValidator />
                    <ValidationSummary class="alert alert-danger" />

                    <div class="mb-3">
                        <label class="form-label">Название вакансии:</label>
                        <InputText @bind-Value="@Vacancy.Name" class="form-control" />
                        <ValidationMessage For="@(() => Vacancy.Name)" />
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Описание:</label>
                        <InputTextArea @bind-Value="@Vacancy.Description" class="form-control" rows="5" />
                        <ValidationMessage For="@(() => Vacancy.Description)" />
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Тимлид:</label>
                        <input class="form-control" 
                               value="@($"{Vacancy.TeamLeaderLastName} {Vacancy.TeamLeaderFirstName}")" 
                               readonly />
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Email тимлида:</label>
                        <input class="form-control" value="@Vacancy.TeamLeaderEmail" readonly />
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Команда:</label>
                        <input class="form-control" value="@(Command?.Name ?? "Не указана")" readonly />
                    </div>

                    <div class="d-flex justify-content-between mt-4">
                        <button type="submit" class="btn btn-success" disabled="@isSubmitting">
                            <span class="@(isSubmitting ? "d-none" : "")">Сохранить изменения</span>
                            <span class="spinner-border spinner-border-sm @(isSubmitting ? "" : "d-none")" role="status"></span>
                        </button>
                        <a href="@($"/vacancy/details?id={Vacancy.Id}")" class="btn btn-secondary">Отмена</a>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    [SupplyParameterFromQuery]
    public int Id { get; set; }

    private Vacancy? Vacancy { get; set; }
    private Command? Command { get; set; }
    private bool isLoading = true;
    private bool isSubmitting = false;
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            using var context = DbFactory.CreateDbContext();
            
            Vacancy = await context.Vacancies
                .Include(v => v.Command)
                .FirstOrDefaultAsync(v => v.Id == Id);

            if (Vacancy == null)
            {
                errorMessage = "Вакансия не найдена";
                return;
            }

            Command = Vacancy.Command;

            // Проверяем, является ли текущий пользователь автором вакансии
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var currentUser = await UserManager.GetUserAsync(authState.User);

            if (currentUser?.Email != Vacancy.TeamLeaderEmail)
            {
                errorMessage = "Вы можете редактировать только свои вакансии";
                Vacancy = null;
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Ошибка загрузки: {ex.Message}";
            Console.WriteLine($"Error in OnInitializedAsync: {ex}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task UpdateVacancy()
    {
        isSubmitting = true;
        errorMessage = null;

        try
        {
            using var context = DbFactory.CreateDbContext();
            
            // Проверяем существование вакансии
            var existingVacancy = await context.Vacancies.FindAsync(Vacancy.Id);
            if (existingVacancy == null)
            {
                errorMessage = "Вакансия не найдена в базе данных";
                return;
            }

            // Обновляем только разрешенные поля
            existingVacancy.Name = Vacancy.Name;
            existingVacancy.Description = Vacancy.Description;

            await context.SaveChangesAsync();
            await JSRuntime.InvokeVoidAsync("alert", "Изменения сохранены успешно!");
            NavigationManager.NavigateTo($"/vacancy/details?id={Vacancy.Id}");
        }
        catch (DbUpdateException dbEx)
        {
            errorMessage = "Ошибка сохранения в базу данных";
            Console.WriteLine($"DbUpdateException: {dbEx.InnerException?.Message ?? dbEx.Message}");
        }
        catch (Exception ex)
        {
            errorMessage = $"Неожиданная ошибка: {ex.Message}";
            Console.WriteLine($"Exception in UpdateVacancy: {ex}");
        }
        finally
        {
            isSubmitting = false;
        }
    }
}