@page "/vacancy/create"
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.EntityFrameworkCore
@using VSHCTwebApp.Components.Models
@using VSHCTwebApp.Data
@inject IDbContextFactory<VSHCTwebAppContext> DbFactory
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<ApplicationUser> UserManager
@inject IJSRuntime JSRuntime

<h1>Создание новой вакансии</h1>

<hr />

@if (errorMessage != null)
{
    <div class="alert alert-danger">
        @errorMessage
        <button class="btn btn-sm btn-secondary ms-2" @onclick="ClearError">Закрыть</button>
    </div>
}

<div class="container mt-4">
    <div class="card">
        <div class="card-header bg-primary text-white">
            <h2>Новая вакансия</h2>
        </div>

        <div class="card-body">
            <EditForm Model="@Vacancy" OnValidSubmit="@CreateVacancy">
                <DataAnnotationsValidator />
                <ValidationSummary class="alert alert-danger" />

                <div class="mb-3">
                    <label class="form-label">Название вакансии:</label>
                    <InputText @bind-Value="@Vacancy.Name" class="form-control" />
                    <ValidationMessage For="@(() => Vacancy.Name)" />
                </div>

                <div class="mb-3">
                    <label class="form-label">Описание:</label>
                    <InputTextArea @bind-Value="@Vacancy.Description" class="form-control" rows="5" />
                    <ValidationMessage For="@(() => Vacancy.Description)" />
                </div>

                <div class="mb-3">
                    <label class="form-label">Тимлид:</label>
                    <input class="form-control" 
                           value="@($"{Vacancy.TeamLeaderLastName} {Vacancy.TeamLeaderFirstName}")" 
                           readonly />
                </div>

                <div class="mb-3">
                    <label class="form-label">Email тимлида:</label>
                    <input class="form-control" value="@Vacancy.TeamLeaderEmail" readonly />
                </div>

                <div class="d-flex justify-content-between mt-4">
                    <button type="submit" class="btn btn-success" disabled="@isSubmitting">
                        <span class="@(isSubmitting ? "d-none" : "")">Создать вакансию</span>
                        <span class="spinner-border spinner-border-sm @(isSubmitting ? "" : "d-none")" role="status"></span>
                    </button>
                    <a href="/vacancy" class="btn btn-secondary">Отмена</a>
                </div>
            </EditForm>
        </div>
    </div>
</div>


@code {
    private Vacancy Vacancy { get; set; } = new();
    private bool isSubmitting = false;
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            using var context = DbFactory.CreateDbContext();
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var currentUser = await UserManager.GetUserAsync(authState.User);

            if (currentUser == null)
            {
                errorMessage = "Пользователь не найден";
                return;
            }

            Vacancy.TeamLeaderEmail = currentUser.Email;
            Vacancy.TeamLeaderFirstName = currentUser.FirstName;
            Vacancy.TeamLeaderLastName = currentUser.LastName;

            var userCommand = await context.Commands
                .Include(c => c.Members)
                .FirstOrDefaultAsync(c => c.Members.Any(m => m.UserId == currentUser.Id));

            if (userCommand != null)
            {
                Vacancy.CommandId = userCommand.Id;
            }
            else
            {
                errorMessage = "Вы не состоите ни в одной команде";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Ошибка инициализации: {ex.Message}";
            Console.WriteLine($"Ошибка в OnInitializedAsync: {ex}");
        }
    }

    private async Task CreateVacancy()
    {
        isSubmitting = true;
        errorMessage = null;

        try
        {
            using var context = DbFactory.CreateDbContext();
            
            // Дополнительная валидация
            if (string.IsNullOrWhiteSpace(Vacancy.Name))
            {
                errorMessage = "Название вакансии обязательно";
                return;
            }

            if (Vacancy.CommandId == 0)
            {
                errorMessage = "Не удалось определить команду";
                return;
            }

            context.Vacancies.Add(Vacancy);
            await context.SaveChangesAsync();
            await JSRuntime.InvokeVoidAsync("alert", "Вакансия успешно создана!");
            NavigationManager.NavigateTo("/vacancy");
        }
        catch (DbUpdateException dbEx)
        {
            errorMessage = "Ошибка сохранения в базу данных";
            Console.WriteLine($"DbUpdateException: {dbEx.InnerException?.Message ?? dbEx.Message}");
        }
        catch (Exception ex)
        {
            errorMessage = $"Неожиданная ошибка: {ex.Message}";
            Console.WriteLine($"Exception in CreateVacancy: {ex}");
        }
        finally
        {
            isSubmitting = false;
        }
    }

    private void ClearError()
    {
        errorMessage = null;
    }
}
