@page "/vacancy/details"
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using VSHCTwebApp.Components.Models
@using VSHCTwebApp.Data
@using System.ComponentModel.DataAnnotations
@inject IDbContextFactory<VSHCTwebAppContext> DbFactory
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<ApplicationUser> UserManager
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<div class="container mt-4">
    <div class="card">
        <div class="card-header bg-primary text-white">
            <h2>@vacancy?.Name</h2>
        </div>

        <div class="card-body">
            @if (vacancy == null)
            {
                <p class="text-center"><em>Загрузка данных...</em></p>
            }
            else
            {
                <div class="row mb-4">
                    <div class="col-md-6">
                        <dl class="row">
                            <dt class="col-sm-4">Описание:</dt>
                            <dd class="col-sm-8">@vacancy.Description</dd>

                            <dt class="col-sm-4">Контактное лицо:</dt>
                            <dd class="col-sm-8">
                                @vacancy.TeamLeaderLastName @vacancy.TeamLeaderFirstName
                                <br />
                                <small class="text-muted">@vacancy.TeamLeaderEmail</small>
                            </dd>

                            <dt class="col-sm-4">Команда:</dt>
                            <dd class="col-sm-8">@(vacancy.Command?.Name ?? "Не указана")</dd>
                        </dl>
                    </div>
                </div>

                <!-- Кнопки действий -->
                <div class="d-flex justify-content-between">
                    <div>
                        @if (isCurrentUserOwner)
                        {
                            <a href="@($"/vacancy/edit?id={vacancy.Id}")" class="btn btn-primary me-2">
                                <i class="bi bi-pencil"></i> Редактировать
                            </a>
                            <button class="btn btn-danger me-2" @onclick="() => showDeleteDialog = true">
                                <i class="bi bi-trash"></i> Удалить
                            </button>
                        }
                        else if (!hasResponded)
                        {
                            <button class="btn btn-success me-2" @onclick="ShowResponseModal">
                                <i class="bi bi-envelope-plus"></i> Откликнуться
                            </button>
                        }
                        <a href="/vacancy" class="btn btn-secondary">
                            <i class="bi bi-arrow-left"></i> Назад к списку
                        </a>
                    </div>
                </div>

                <!-- Список откликов (виден только автору) -->
                @if (isCurrentUserOwner && responses.Any())
                {
                    <div class="mt-4">
                        <h5>Отклики (@responses.Count)</h5>
                        @foreach (var response in responses)
                        {
                            <div class="card mb-2">
                                <div class="card-body">
                                    <div class="d-flex justify-content-between">
                                        <div>
                                            <h6>@response.User?.UserName</h6>
                                            <p class="mb-1">@response.Message</p>
                                            <small class="text-muted">@response.ResponseDate.ToString("g")</small>
                                        </div>
                                        <a href="mailto:@response.User?.Email" class="btn btn-sm btn-outline-primary">
                                            <i class="bi bi-envelope"></i> Написать
                                        </a>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                }
            }
        </div>
    </div>
</div>


@if (showDeleteDialog)
{
    <div class="modal" tabindex="-1" style="display:block; background:rgba(0,0,0,0.5)">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header bg-danger text-white">
                    <h5 class="modal-title">Подтверждение удаления</h5>
                    <button type="button" class="btn-close" @onclick="CancelDelete"></button>
                </div>
                <div class="modal-body">
                    <p>Вы уверены, что хотите удалить вакансию "@vacancy?.Name"?</p>
                    <p class="text-danger">Это действие нельзя отменить!</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CancelDelete">
                        Отмена
                    </button>
                    <button type="button" class="btn btn-danger" @onclick="ConfirmDelete">
                        @if (isDeleting)
                        {
                            <span class="spinner-border spinner-border-sm" role="status"></span>
                        }
                        else
                        {
                            <span>Удалить</span>
                        }
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@if (showResponseModal)
{
    <div class="modal fade show" style="display: block; background: rgba(0,0,0,0.5)" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header bg-primary text-white">
                    <h5 class="modal-title">Отклик на вакансию</h5>
                    <button type="button" class="btn-close" @onclick="CloseResponseModal"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label class="form-label">Ваше сообщение:</label>
                        <InputTextArea @bind-Value="responseMessage" class="form-control" rows="5" />
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseResponseModal">
                        Отмена
                    </button>
                    <button type="button" class="btn btn-primary" @onclick="SubmitResponse" disabled="@isSubmitting">
                        @if (isSubmitting)
                        {
                            <span class="spinner-border spinner-border-sm" role="status"></span>
                        }
                        Отправить
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private Vacancy? vacancy;
    private bool isCurrentUserOwner = false;
    private bool showDeleteDialog = false;
    private bool isDeleting = false;

    // Новые поля для функционала откликов
    private List<Response> responses = new();
    private bool hasResponded = false;
    private bool showResponseModal = false;
    private string responseMessage = string.Empty;
    private bool isSubmitting = false;

    [Parameter]
    [SupplyParameterFromQuery]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            using var context = DbFactory.CreateDbContext();

            vacancy = await context.Vacancies
                .Include(v => v.Command)
                .FirstOrDefaultAsync(v => v.Id == Id);

            if (vacancy == null)
            {
                NavigationManager.NavigateTo("/notfound");
                return;
            }

            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var currentUser = await UserManager.GetUserAsync(authState.User);

            if (currentUser != null)
            {
                isCurrentUserOwner = currentUser.Email == vacancy.TeamLeaderEmail;

                responses = await context.Responses
                    .Include(r => r.User)
                    .Where(r => r.VacancyId == Id)
                    .OrderByDescending(r => r.ResponseDate)
                    .ToListAsync();

                hasResponded = responses.Any(r => r.UserId == currentUser.Id);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ошибка загрузки: {ex.Message}");
        }
    }


    private void ShowDeleteConfirmation()
    {
        showDeleteDialog = true;
    }

    private void CancelDelete()
    {
        showDeleteDialog = false;
    }

    private async Task ConfirmDelete()
    {
        if (vacancy == null || isDeleting) return;

        isDeleting = true;

        try
        {
            using var context = DbFactory.CreateDbContext();
            var vacancyToDelete = await context.Vacancies.FindAsync(vacancy.Id);

            if (vacancyToDelete != null)
            {
                context.Vacancies.Remove(vacancyToDelete);
                await context.SaveChangesAsync();
                await JSRuntime.InvokeVoidAsync("alert", "Вакансия успешно удалена!");
                NavigationManager.NavigateTo("/vacancy");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Ошибка при удалении: {ex.Message}");
        }
        finally
        {
            isDeleting = false;
            showDeleteDialog = false;
        }
    }

    private void ShowResponseModal()
    {
        responseMessage = string.Empty;
        showResponseModal = true;
    }

    private void CloseResponseModal()
    {
        showResponseModal = false;
    }

    private async Task SubmitResponse()
    {
        if (string.IsNullOrWhiteSpace(responseMessage))
        {
            await JSRuntime.InvokeVoidAsync("alert", "Введите сообщение");
            return;
        }

        if (vacancy == null) return;

        isSubmitting = true;

        try
        {
            using var context = DbFactory.CreateDbContext();
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var currentUser = await UserManager.GetUserAsync(authState.User);

            if (currentUser == null) return;

            var response = new Response
                {
                    VacancyId = vacancy.Id,
                    UserId = currentUser.Id,
                    Message = responseMessage,
                    ResponseDate = DateTime.UtcNow
                };

            context.Responses.Add(response);
            await context.SaveChangesAsync();

            responses.Insert(0, response);
            hasResponded = true;
            showResponseModal = false;

            await JSRuntime.InvokeVoidAsync("alert", "Ваш отклик успешно отправлен!");
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Ошибка: {ex.Message}");
        }
        finally
        {
            isSubmitting = false;
        }
    }
}