@page "/vacancy/delete"
@using Microsoft.EntityFrameworkCore
@using VSHCTwebApp.Components.Models
@using VSHCTwebApp.Data
@inject IDbContextFactory<VSHCTwebAppContext> DbFactory
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<div class="container mt-4">
    <div class="card">
        <div class="card-header bg-danger text-white">
            <h2>Удаление вакансии</h2>
        </div>

        <div class="card-body">
            @if (vacancy == null)
            {
                <p class="text-center"><em>Загрузка данных...</em></p>
            }
            else
            {
                <h3>Вы уверены, что хотите удалить эту вакансию?</h3>
                <dl class="row mt-3">
                    <dt class="col-sm-3">Название:</dt>
                    <dd class="col-sm-9">@vacancy.Name</dd>

                    <dt class="col-sm-3">Описание:</dt>
                    <dd class="col-sm-9">@vacancy.Description</dd>
                </dl>

                <div class="d-flex justify-content-between mt-4">
                    <button class="btn btn-danger" @onclick="DeleteVacancy">
                        <i class="bi bi-trash"></i> Удалить
                    </button>
                    <a href="@($"/vacancy/details?id={vacancy.Id}")" class="btn btn-secondary">
                        <i class="bi bi-arrow-left"></i> Отмена
                    </a>
                </div>
            }
        </div>
    </div>
</div>

@code {
    [Parameter]
    [SupplyParameterFromQuery]
    public int Id { get; set; }

    private Vacancy? vacancy;

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        vacancy = await context.Vacancies.FindAsync(Id);

        if (vacancy == null)
        {
            NavigationManager.NavigateTo("/notfound");
        }
    }

    private async Task DeleteVacancy()
    {
        try
        {
            using var context = DbFactory.CreateDbContext();
            context.Vacancies.Remove(vacancy!);
            await context.SaveChangesAsync();

            await JSRuntime.InvokeVoidAsync("alert", "Вакансия успешно удалена!");
            NavigationManager.NavigateTo("/vacancy");
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Ошибка при удалении: {ex.Message}");
        }
    }
}
