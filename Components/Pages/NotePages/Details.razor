@page "/notes/details"
@using Microsoft.EntityFrameworkCore
@using VSHCTwebApp.Components.Models
@using Microsoft.AspNetCore.Identity;
@using VSHCTwebApp.Data;
@inject UserManager<ApplicationUser> UserManager
@inject IHttpContextAccessor HttpContextAccessor
@inject IDbContextFactory<VSHCTwebApp.Data.VSHCTwebAppContext> DbFactory
@inject NavigationManager NavigationManager



<h1>Подробнее</h1>

<div class="details-container">
    @if (note is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <div class="card shadow-sm p-4 mb-4">
            <!-- Общая карточка с тенью и отступами -->
            <dl class="row">

                <!-- Каждый блок в отдельной строке с отступом -->

                <div class="col-12 mb-3">
                    <dt class="text-primary fw-bold small">Название</dt>
                    <dd class="ms-2 mt-1 fs-5">@note.Title</dd>
                </div>

                <div class="col-12 mb-3">
                    <dt class="text-primary fw-bold small">Проблема</dt>
                    <dd class="ms-2 mt-1 fs-5">@note.Problem</dd>
                </div>
                <div class="col-12 mb-3">
                    <dt class="text-primary fw-bold small">Предлагаемое решение</dt>
                    <dd class="ms-2 mt-1 fs-5">@note.Solution</dd>
                </div>
                <div class="col-12 mb-3">
                    <dt class="text-primary fw-bold small">Ожидаемый результат</dt>
                    <dd class="ms-2 mt-1 fs-5">@note.Result</dd>
                </div>
                <div class="col-12 mb-3">
                    <dt class="text-primary fw-bold small">Описание необходимых ресурсов для реализации</dt>
                    <dd class="ms-2 mt-1 fs-5">@note.DescrNeededResurses</dd>
                </div>
                <div class="col-12 mb-3">
                    <dt class="text-primary fw-bold small">Стек технологий</dt>
                    <dd class="ms-2 mt-1 fs-5">@note.StackTech</dd>
                </div>

                <div class="col-12 mb-3">
                    <dt class="text-primary fw-bold small">Кем создано</dt>
                    <dd class="ms-2 mt-1 fs-5">@note.CreatedBy</dd>
                </div>

                <div class="col-12 mb-3">
                    <dt class="text-primary fw-bold small">Когда создано</dt>
                    <dd class="ms-2 mt-1 fs-5">@note.CreatedAt</dd>
                </div>
            </dl>
        </div>
        <div class="details-button-container">
            @{
                var currentUser = HttpContextAccessor.HttpContext.User;
                var currentUserName = UserManager.GetUserName(currentUser);
            }

            @if (currentUserName == note.CreatedBy)
            {
                <a href="@($"/notes/edit?id={note.Id}")" class="btn btn-primary mb-3">Изменить</a>
            }

            <EditForm method="post" Model="note" OnValidSubmit="DeleteNote" FormName="delete" Enhance>
                <button type="submit" class="btn btn-danger" disabled="@(note is null)">Удалить</button>
            </EditForm>
            <EditForm method="post" Model="note" OnValidSubmit="ApproveNote" FormName="approve" Enhance>
                <AuthorizeView Policy="AdminOnly">
                    <Authorized Context="authContext">
                        <button type="submit" class="btn btn-danger" disabled="@(note is null)">Подвердить</button>
                    </Authorized>
                    <NotAuthorized Context="authContext">

                    </NotAuthorized>
                </AuthorizeView>
            </EditForm>
            <a href="@($"/notes")" class="btn btn-primary mb-3">Вернуться</a>
        </div>
    }
</div>
﻿
@code {
    private Note? note { get; set; } = new();

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        note = await context.Note.FirstOrDefaultAsync(m => m.Id == Id);

        if (note is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteNote()
    {
        using var context = DbFactory.CreateDbContext();
        context.Note.Remove(note!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/notes");
    }
    private async Task ApproveNote()
    {
        if (note == null) return;
        using var context = DbFactory.CreateDbContext();
        var noteToApprove = await context.Note.FindAsync(note.Id);
        if (noteToApprove != null)
        {
            var approvedProject = new Project
                {
                    Title = noteToApprove.Title,
                    Problem = noteToApprove.Problem,
                    Solution = noteToApprove.Solution,
                    Result = noteToApprove.Result,
                    DescrNeededResurses = noteToApprove.DescrNeededResurses,
                    StackTech = noteToApprove.StackTech,
                    CreatedBy = noteToApprove.CreatedBy,
                    ConfermedBy = noteToApprove.CreatedBy
                };

            context.Project.Add(approvedProject);
            context.Note.Remove(noteToApprove);

            await context.SaveChangesAsync();

            NavigationManager.NavigateTo("/projects");
        }
    }
}
