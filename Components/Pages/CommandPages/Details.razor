@page "/commands/details"
@using Microsoft.EntityFrameworkCore
@using VSHCTwebApp.Components.Models
@using Microsoft.AspNetCore.Identity;
@using VSHCTwebApp.Data
@using Microsoft.AspNetCore.Authorization
@inject UserManager<ApplicationUser> UserManager
@inject IHttpContextAccessor HttpContextAccessor
@inject IAuthorizationService AuthorizationService
@inject IDbContextFactory<VSHCTwebAppContext> DbFactory
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<div class="container mt-4">
    <div class="card">
        <div class="card-header bg-primary text-white">
            <h2>Детали команды</h2>
        </div>

        <div class="card-body">
            @if (command is null)
            {
                <p class="text-center"><em>Загрузка данных...</em></p>
            }
            else
            {
                <dl class="row">
                    <dt class="col-sm-3">Название команды:</dt>
                    <dd class="col-sm-9">@command.Name</dd>

                    <dt class="col-sm-3">Описание:</dt>
                    <dd class="col-sm-9">@command.Description</dd>

                    <dt class="col-sm-3">ТимЛидер:</dt>
                    <dd class="col-sm-9">@command.TeamLeaderLastName @command.TeamLeaderFirstName @command.TeamLeaderEmail</dd>

                    <dt class="col-sm-3">Стек технологий:</dt>
                    <dd class="col-sm-9">

                        @{
                            var currentUser = HttpContextAccessor.HttpContext.User;
                            var currentUserName = UserManager.GetUserName(currentUser);
                        }

                        <AuthorizeView Policy="TeamLidOnly">
                            <Authorized>
                                @if (editingField == "tech" && command.TeamLeaderEmail == currentUserName)
                                {
                                    <div class="mb-3">
                                        <select class="form-select" multiple
                                                @onchange="HandleTechStackChange">
                                            @foreach (var tech in availableTechnologies)
                                            {
                                                <option value="@tech" selected="@(selectedTechStack.Contains(tech))">@tech</option>
                                            }
                                        </select>
                                        <button class="btn btn-sm btn-success mt-2" @onclick="SaveChanges">
                                            <i class="bi bi-check"></i> Сохранить
                                        </button>
                                        <button class="btn btn-sm btn-secondary mt-2 ms-2" @onclick="CancelEdit">
                                            <i class="bi bi-x"></i> Отмена
                                        </button>
                                    </div>
                                }
                                else
                                {
                                    <div>
                                        @if (command?.TechStack?.Any() == true)
                                        {
                                            <div class="d-flex flex-wrap gap-2">
                                                @foreach (var tech in command.TechStack)
                                                {
                                                    <span class="badge bg-primary">@tech</span>
                                                }
                                            </div>
                                        }
                                        else
                                        {
                                            <span class="text-muted">Не указано</span>
                                        }
                                        <button class="btn btn-sm btn-outline-primary ms-2" @onclick='() => StartEdit("tech")'>
                                            <i class="bi bi-pencil"></i> Изменить
                                        </button>
                                    </div>
                                }
                            </Authorized>
                            <NotAuthorized>
                            </NotAuthorized>
                        </AuthorizeView>
                    </dd>
                    <dt class="col-sm-3">Языки программирования:</dt>
                    <dd class="col-sm-9">
                        <AuthorizeView Policy="TeamLidOnly">
                            <Authorized>
                                @if (editingField == "lang" && command.TeamLeaderEmail == currentUserName)
                                {
                                    <div class="mb-3">
                                        <select class="form-select" multiple
                                                @onchange="HandleLanguagesChange">
                                            @foreach (var lang in availableLanguages)
                                            {
                                                <option value="@lang" selected="@(selectedLanguages.Contains(lang))">@lang</option>
                                            }
                                        </select>
                                        <button class="btn btn-sm btn-success mt-2" @onclick="SaveChanges">
                                            <i class="bi bi-check"></i> Сохранить
                                        </button>
                                        <button class="btn btn-sm btn-secondary mt-2 ms-2" @onclick="CancelEdit">
                                            <i class="bi bi-x"></i> Отмена
                                        </button>
                                    </div>
                                }
                                else
                                {
                                    <div>
                                        @if (command?.ProgrammingLanguages?.Any() == true)
                                        {
                                            <div class="d-flex flex-wrap gap-2">
                                                @foreach (var lang in command.ProgrammingLanguages)
                                                {
                                                    <span class="badge bg-success">@lang</span>
                                                }
                                            </div>
                                        }
                                        else
                                        {
                                            <span class="text-muted">Не указано</span>
                                        }
                                        <button class="btn btn-sm btn-outline-primary ms-2" @onclick='() => StartEdit("lang")'>
                                            <i class="bi bi-pencil"></i> Изменить
                                        </button>
                                    </div>
                                }
                            </Authorized>
                            <NotAuthorized>
                            </NotAuthorized>
                        </AuthorizeView>
                    </dd>


                    <dt class="col-sm-3">Статус команды:</dt>
                    <dd class="col-sm-9">
                        @if (command.TeamLeaderEmail == currentUserName)
                        {
                            <AuthorizeView Policy="TeamLidOnly">
                                <Authorized>
                                    <div class="form-check form-switch">
                                        <input class="form-check-input" type="checkbox" id="statusSwitch"
                                        @bind="command.IsActive"
                                        @bind:after="UpdateCommand">
                                        <label class="form-check-label" for="statusSwitch">
                                            @(command.IsActive ? "В работе" : "В поиске")
                                        </label>
                                    </div>
                                </Authorized>
                                <NotAuthorized>
                                    <div class="form-control-plaintext">
                                        @(command.IsActive ? "В работе" : "В поиске")
                                    </div>
                                </NotAuthorized>
                            </AuthorizeView>
                        }
                    </dd>

                    <dt class="col-sm-3">Приватность:</dt>
                    <dd class="col-sm-9">
                        <AuthorizeView Policy="TeamLidOnly">
                            <Authorized>
                                <div class="form-check form-switch">
                                    <input class="form-check-input" type="checkbox" id="privacySwitch"
                                           @bind="command.IsPublic"
                                           @bind:after="UpdateCommand">
                                    <label class="form-check-label" for="privacySwitch">
                                        @(command.IsPublic ? "Открытая" : "Закрытая")
                                    </label>
                                </div>
                            </Authorized>
                            <NotAuthorized>
                                <div class="form-control-plaintext">
                                    @(command.IsPublic ? "Открытая" : "Закрытая")
                                </div>
                            </NotAuthorized>
                        </AuthorizeView>
                    </dd>

                    <dt class="col-sm-3">Члены команды:</dt>
                    <dd class="col-sm-9">
                        @if (command.Members?.Any() == true)
                        {
                            <ul class="list-group">
                                @foreach (var member in command.Members)
                                {
                                    <li class="list-group-item">
                                        @member.UserLastName
                                        @member.UserFirstName
                                        @member.UserEmail
                                    </li>
                                }
                            </ul>
                        }
                        else
                        {
                            <span class="text-muted">Участники не добавлены</span>
                        }
                    </dd>
                </dl>

                <div class="mt-4 d-flex justify-content-between">
                    <AuthorizeView Policy="">
                            <Authorized>
                            @if (command.TeamLeaderEmail == currentUserName)
                            {
                                <div>
                                    <a href="@($"/commands/edit?id={command.Id}")" class="btn btn-primary">
                                        <i class="bi bi-pencil"></i> Редактировать
                                    </a>
                                    <button @onclick="ShowDeleteConfirmation" class="btn btn-danger ms-2">
                                        <i class="bi bi-trash"></i> Удалить команду
                                    </button>
                                </div>
                            }
                    </Authorized>
                            <NotAuthorized></NotAuthorized>
                    </AuthorizeView>
                    <a href="/commands" class="btn btn-secondary">
                        <i class="bi bi-arrow-left"></i> Назад к списку
                    </a>
                </div>
            }
        </div>
    </div>
</div>


@if (showDeleteDialog)
{
    <div class="modal" tabindex="-1" style="display:block" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header bg-danger text-white">
                    <h5 class="modal-title">Подтверждение удаления</h5>
                    <button type="button" class="btn-close" @onclick="CancelDelete"></button>
                </div>
                <div class="modal-body">
                    <p>Вы уверены, что хотите удалить команду "@command?.Name"?</p>
                    <p class="text-danger">Это действие нельзя отменить!</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CancelDelete">
                        <i class="bi bi-x-circle"></i> Отмена
                    </button>
                    <button type="button" class="btn btn-danger" @onclick="ConfirmDelete">
                        <i class="bi bi-trash"></i> Удалить
                    </button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    @rendermode InteractiveServer
    private Command? command;
    private bool showDeleteDialog = false;
    private bool isDeleting = false;
    private bool isLoading = false;

    private string? editingField = null; // "tech", "lang" или null
    private List<string> selectedTechStack = new();
    private List<string> selectedLanguages = new();

    private readonly List<string> availableTechnologies = new()
    {
        "React", "Angular", "Node.js", "Docker", "AWS", "Pandas", "Vue", "1c", "ReactJS", "NestJS", "Unreal Engine"
    };

    private readonly List<string> availableLanguages = new()
    {
        "JavaScript", "Python", "C#", "Java", "Go", "PHP", "Rust", "Dart", "HTML", "CSS", "TypeScript", "Kotlin"
    };


    [Parameter]
    [SupplyParameterFromQuery]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadCommandData();
        if (command != null)
        {
            selectedTechStack = command.TechStack?.ToList() ?? new List<string>();
            selectedLanguages = command.ProgrammingLanguages?.ToList() ?? new List<string>();
        }
    }
    private async Task LoadCommandData()
    {
        using var context = DbFactory.CreateDbContext();
        command = await context.Commands
            .Include(c => c.Members)
            .FirstOrDefaultAsync(m => m.Id == Id);

        if (command is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }
    
    private void StartEdit(string fieldType)
    {
        editingField = fieldType;

        if (fieldType == "tech" && command?.TechStack != null)
        {
            selectedTechStack = new List<string>(command.TechStack);
        }
        else if (fieldType == "lang" && command?.ProgrammingLanguages != null)
        {
            selectedLanguages = new List<string>(command.ProgrammingLanguages);
        }

        StateHasChanged();
    }
    private async Task HandleTechStackChange(ChangeEventArgs e)
    {
        var selectElement = (e.Value as IEnumerable<string>)?.ToList();
        if (selectElement != null)
        {
            selectedTechStack = selectElement;
        }
    }
    private async Task HandleLanguagesChange(ChangeEventArgs e)
    {
        if (e.Value is string[] selectedValues)
        {
            selectedLanguages = selectedValues.ToList();
        }
    }
    private async Task SaveChanges()
    {
        if (command == null) return;

        if (editingField == "tech")
        {
            command.TechStack = selectedTechStack;
        }
        else if (editingField == "lang")
        {
            command.ProgrammingLanguages = selectedLanguages;
        }

        await UpdateCommand();
        editingField = null;
    }



    private void CancelEdit()
    {
        editingField = null;
    }

    
    private async Task UpdateCommand()
    {
        if (command == null || isLoading) return;

        isLoading = true;
        StateHasChanged();

        try
        {
            using var context = DbFactory.CreateDbContext();
            context.Commands.Update(command);
            await context.SaveChangesAsync();

            // Показываем уведомление об успешном сохранении
            await JSRuntime.InvokeVoidAsync("alert", "Изменения сохранены");
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", $"Ошибка при обновлении: {ex.Message}");
            // Откатываем изменения в UI, если сохранение не удалось
            await LoadCommandData();
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }


    private void ShowDeleteConfirmation()
    {
        showDeleteDialog = true;
        StateHasChanged();
    }

    private void CancelDelete()
    {
        showDeleteDialog = false;
        StateHasChanged();
    }

    private async Task ConfirmDelete()
    {
        if (isDeleting) return;

        isDeleting = true;
        StateHasChanged();

        try
        {
            using var context = DbFactory.CreateDbContext();

            // Удаляем всех участников команды
            var members = await context.TeamMembers
                .Where(tm => tm.CommandId == Id)
                .ToListAsync();

            context.TeamMembers.RemoveRange(members);

            // Удаляем саму команду
            var commandToDelete = await context.Commands.FindAsync(Id);
            if (commandToDelete != null)
            {
                context.Commands.Remove(commandToDelete);
            }

            await context.SaveChangesAsync();

            // Перенаправляем на список команд
            NavigationManager.NavigateTo("/commands", forceLoad: true);
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", $"Ошибка при удалении: {ex.Message}");
            isDeleting = false;
            showDeleteDialog = false;
            StateHasChanged();
        }
    }
}