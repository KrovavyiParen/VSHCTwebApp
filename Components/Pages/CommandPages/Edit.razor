@page "/commands/edit"
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using VSHCTwebApp.Components.Models
@using VSHCTwebApp.Data
@inject IDbContextFactory<VSHCTwebAppContext> DbFactory
@inject NavigationManager NavigationManager
@inject UserManager<ApplicationUser> UserManager



<h1>Редактирование команды</h1>

<hr />
@if (Command is null)
{
    <p><em>Загрузка...</em></p>
}
else
{
    <div class="container mt-4">
        <div class="card">
            <div class="card-header bg-primary text-white">
                <h2>Редактирование команды</h2>
            </div>

            <div class="card-body">
                <EditForm Model="@Command" OnValidSubmit="@UpdateCommand" Context="formContext">
                    <DataAnnotationsValidator />
                    <ValidationSummary class="alert alert-danger" />
                    <input type="hidden" name="Command.Id" value="@Command.Id" />

                    <div class="mb-3">
                        <label for="name" class="form-label">Название команды:</label>
                        <InputText id="name" @bind-Value="@Command.Name" class="form-control" />
                        <ValidationMessage For="@(() => Command.Name)" class="text-danger" />
                    </div>

                    <div class="mb-3">
                        <label for="description" class="form-label">Описание:</label>
                        <InputTextArea id="description" @bind-Value="@Command.Description" class="form-control" rows="3" />
                        <ValidationMessage For="@(() => Command.Description)" class="text-danger" />
                    </div>

                    <div class="mb-4">
                        <h5>Участники команды</h5>

                        <button type="button" class="btn btn-primary mb-3" @onclick="ToggleUserSearch">
                            <i class="bi bi-plus-circle"></i> @(showUserSearch ? "Скрыть поиск" : "Добавить участника")
                        </button>

                        @if (showUserSearch)
                        {
                            <div class="card mb-3">
                                <div class="card-body">
                                    <div class="input-group mb-3">
                                        <input type="text" class="form-control" placeholder="Поиск по email"
                                               @bind="@searchEmail" @bind:event="oninput" />
                                        <button class="btn btn-outline-secondary" type="button" @onclick="SearchUsers">
                                            <i class="bi bi-search"></i> Поиск
                                        </button>
                                    </div>

                                    @if (foundUsers.Any())
                                    {
                                        <div class="list-group">
                                            @foreach (var user in foundUsers)
                                            {
                                                <div class="list-group-item d-flex justify-content-between align-items-center">
                                                    <div>
                                                        <strong>@user.Email</strong>
                                                        @if (!string.IsNullOrEmpty(user.UserName))
                                                        {
                                                            <div class="text-muted small">@user.UserName</div>
                                                        }
                                                    </div>
                                                    <button type="button" class="btn btn-sm btn-success"
                                                            @onclick="() => AddTeamMember(user)"
                                                            disabled="@Command.Members.Any(m => m.UserId == user.Id)">
                                                        <i class="bi bi-plus"></i> Добавить
                                                    </button>
                                                </div>
                                            }
                                        </div>
                                    }
                                    else if (!string.IsNullOrEmpty(searchEmail))
                                    {
                                        <div class="alert alert-info mt-2">
                                            Пользователи не найдены
                                        </div>
                                    }
                                </div>
                            </div>
                        }

                        @if (Command.Members.Any())
                        {
                            <div class="card">
                                <div class="card-header bg-light">
                                    <h6 class="mb-0">Текущие участники (@Command.Members.Count)</h6>
                                </div>
                                <div class="card-body">
                                    <ul class="list-group">
                                        @foreach (var member in Command.Members)
                                        {
                                            <li class="list-group-item d-flex justify-content-between align-items-center">
                                                @member.UserEmail
                                                <button type="button" class="btn btn-sm btn-danger"
                                                        @onclick="() => RemoveTeamMember(member)">
                                                    <i class="bi bi-trash"></i> Удалить
                                                </button>
                                            </li>
                                        }
                                    </ul>
                                </div>
                            </div>
                        }
                        else
                        {
                            <div class="alert alert-warning">
                                Участники не добавлены
                            </div>
                        }
                    </div>

                    <div class="d-flex justify-content-between">
                        <button type="submit" class="btn btn-success">
                            <i class="bi bi-check-circle"></i> Сохранить изменения
                        </button>
                        <a href="/commands" class="btn btn-secondary">
                            <i class="bi bi-arrow-left"></i> Отмена
                        </a>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    [SupplyParameterFromQuery]
    public int Id { get; set; }

    private Command? Command { get; set; }
    private bool showUserSearch = false;
    private string searchEmail = string.Empty;
    private List<ApplicationUser> foundUsers = new();

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Command = await context.Commands
            .Include(c => c.Members)
            .FirstOrDefaultAsync(m => m.Id == Id);

        if (Command is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private void ToggleUserSearch()
    {
        showUserSearch = !showUserSearch;
        if (showUserSearch)
        {
            SearchUsers();
        }
        else
        {
            searchEmail = string.Empty;
            foundUsers.Clear();
        }
    }

    private async Task SearchUsers()
    {
        try
        {
            if (string.IsNullOrWhiteSpace(searchEmail))
            {
                foundUsers = await UserManager.Users
                    .OrderBy(u => u.Email)
                    .Take(10)
                    .ToListAsync();
            }
            else
            {
                foundUsers = await UserManager.Users
                    .Where(u => u.Email.Contains(searchEmail) ||
                               u.UserName.Contains(searchEmail))
                    .OrderBy(u => u.Email)
                    .Take(10)
                    .ToListAsync();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ошибка поиска: {ex.Message}");
        }
    }

    private void AddTeamMember(ApplicationUser user)
    {
        if (!Command!.Members.Any(m => m.UserId == user.Id))
        {
            Command.Members.Add(new TeamMember
                {
                    UserId = user.Id,
                    UserEmail = user.Email
                });
        }
    }

    private void RemoveTeamMember(TeamMember member)
    {
        Command!.Members.Remove(member);
    }

    private async Task UpdateCommand()
    {
        using var context = DbFactory.CreateDbContext();

        // Обновляем команду
        context.Attach(Command!);
        context.Entry(Command!).State = EntityState.Modified;

        // Удаляем старых участников
        var existingMembers = await context.TeamMembers
            .Where(tm => tm.CommandId == Command!.Id)
            .ToListAsync();
        context.TeamMembers.RemoveRange(existingMembers);

        // Добавляем новых участников
        foreach (var member in Command!.Members)
        {
            member.CommandId = Command.Id;
            context.TeamMembers.Add(member);
        }

        try
        {
            await context.SaveChangesAsync();
            NavigationManager.NavigateTo("/commands");
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!await CommandExists(Command!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }
    }

    private async Task<bool> CommandExists(int id)
    {
        using var context = DbFactory.CreateDbContext();
        return await context.Commands.AnyAsync(e => e.Id == id);
    }
}