@page "/projects/edit"
@using Microsoft.EntityFrameworkCore
@using VSHCTwebApp.Components.Models
@inject IDbContextFactory<VSHCTwebApp.Data.VSHCTwebAppContext> DbFactory
@inject NavigationManager NavigationManager



<h1>Изменить</h1>

<hr />
@if (Project is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Project" OnValidSubmit="UpdateProject" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert"/>
                <input type="hidden" name="Project.Id" value="@Project.Id" />
                <div class="mb-3">
                    <label for="title" class="form-label">Название:</label>
                    <InputText id="title" @bind-Value="Project.Title" class="form-control" aria-required="true" />
                    <ValidationMessage For="() => Project.Title" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="description" class="form-label">Проблема:</label>
                    <InputTextArea id="description" @bind-Value="Project.Problem" class="form-control" aria-required="true" />
                    <ValidationMessage For="() => Project.Problem" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="description" class="form-label">Предлагаемое решение:</label>
                    <InputTextArea id="description" @bind-Value="Project.Solution" class="form-control" aria-required="true" />
                    <ValidationMessage For="() => Project.Solution" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="description" class="form-label">Ожидаемый результат:</label>
                    <InputTextArea id="description" @bind-Value="Project.Result" class="form-control" aria-required="true" />
                    <ValidationMessage For="() => Project.Result" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="description" class="form-label">Описание необходимых ресурсов для реализации:</label>
                    <InputTextArea id="description" @bind-Value="Project.DescrNeededResurses" class="form-control" aria-required="true" />
                    <ValidationMessage For="() => Project.DescrNeededResurses" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="description" class="form-label">Стек технологий:</label>
                    <InputTextArea id="description" @bind-Value="Project.StackTech" class="form-control" aria-required="true" />
                    <ValidationMessage For="() => Project.StackTech" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Сохранить</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/projects">Вернуться</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private int Id { get; set; }

    [SupplyParameterFromForm]
    private Project? Project { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Project ??= await context.Project.FirstOrDefaultAsync(m => m.Id == Id);

        if (Project is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateProject()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(Project!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!ProjectExists(Project!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/projects");
    }

    private bool ProjectExists(int id)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Project.Any(e => e.Id == id);
    }
}
