@page "/projects/details"
@using Microsoft.EntityFrameworkCore
@using VSHCTwebApp.Components.Models
@using Microsoft.AspNetCore.Identity;
@using VSHCTwebApp.Data;
@using Microsoft.AspNetCore.Authorization
@inject IAuthorizationService AuthorizationService
@inject IHttpContextAccessor HttpContextAccessor
@inject UserManager<ApplicationUser> UserManager
@inject IDbContextFactory<VSHCTwebApp.Data.VSHCTwebAppContext> DbFactory
@inject NavigationManager NavigationManager


<h1>Подробнее</h1>

<div class="details-container">

    <hr />
    @if (project is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <div class="card shadow-sm p-4 mb-4">
            <!-- Общая карточка с тенью и отступами -->
            <dl class="row">

                <!-- Каждый блок в отдельной строке с отступом -->

                <div class="col-12 mb-3">
                    <dt class="text-primary fw-bold small">Название</dt>
                    <dd class="ms-2 mt-1 fs-5">@project.Title</dd>
                </div>

                <div class="col-12 mb-3">
                    <dt class="text-primary fw-bold small">Проблема</dt>
                    <dd class="ms-2 mt-1 fs-5">@project.Problem</dd>
                </div>
                <div class="col-12 mb-3">
                    <dt class="text-primary fw-bold small">Предлагаемое решение</dt>
                    <dd class="ms-2 mt-1 fs-5">@project.Solution</dd>
                </div>
                <div class="col-12 mb-3">
                    <dt class="text-primary fw-bold small">Ожидаемый результат</dt>
                    <dd class="ms-2 mt-1 fs-5">@project.Result</dd>
                </div>
                <div class="col-12 mb-3">
                    <dt class="text-primary fw-bold small">Описание необходимых ресурсов для реализации</dt>
                    <dd class="ms-2 mt-1 fs-5">@project.DescrNeededResurses</dd>
                </div>
                <div class="col-12 mb-3">
                    <dt class="text-primary fw-bold small">Стек технологий</dt>
                    <dd class="ms-2 mt-1 fs-5">@project.StackTech</dd>
                </div>

                <div class="col-12 mb-3">
                    <dt class="text-primary fw-bold small">Кем создано</dt>
                    <dd class="ms-2 mt-1 fs-5">@project.CreatedBy</dd>
                </div>

                <div class="col-12 mb-3">
                    <dt class="text-primary fw-bold small">Статус проекта</dt>
                    <dd class="ms-2 mt-1 fs-5">
                        @GetStatusDisplay(project.Status)
                        @if (project.Status == ProjectStatus.InProgress && !string.IsNullOrEmpty(project.TakenByTeamName))
                        {
                            <span> (Команда: @project.TakenByTeamName)</span>
                        }
                    </dd>
                </div>
            </dl>

        </div>
        <div class="details-button-container">
            @{
                var currentUser = HttpContextAccessor.HttpContext.User;
                var currentUserName = UserManager.GetUserName(currentUser);
            }

            @if (currentUserName == project.CreatedByEmail)
            {
                <a href="@($"/projects/edit?id={project.Id}")" class="btn btn-primary mb-3">Изменить</a>
            } |
            <a href="@($"/projects")" class="btn btn-primary mb-3">Вернуться</a>
        </div>
        @if (project != null && project.Status == ProjectStatus.Available)
        {
            <div class="mt-4">
                <h3>Заявки на проект</h3>

                <!-- Форма подачи заявки (для капитана) -->
                <AuthorizeView Policy="TeamLidOnly">
                    <Authorized>
                        @if (existingApplication == null)
                        {
                            <div class="application-form mb-4">
                                <h4>Подать заявку</h4>
                                <textarea class="form-control mb-2" placeholder="Ваше сообщение..."
                                          @bind="newApplicationMessage"></textarea>
                                <button class="btn btn-primary" @onclick="SubmitApplication">Отправить заявку</button>
                            </div>
                        }
                        else
                        {
                            <div class="alert alert-info">
                                Ваша заявка:
                                <strong>@GetApplicationStatusDisplay(existingApplication.Status)</strong>
                                <br />
                                <small>@existingApplication.Message</small>
                            </div>
                        }
                    </Authorized>
                </AuthorizeView>

                <!-- Список заявок (для заказчика) -->
                @if (currentUserName == project.CreatedByEmail && applications.Any())
                {
                    <div class="applications-list mt-3">
                        <table class="table">
                            <thead>
                                <tr>
                                    <th>Команда</th>
                                    <th>Дата</th>
                                    <th>Сообщение</th>
                                    <th>Статус</th>
                                    <th>Действия</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var app in applications)
                                {
                                    <tr>
                                        <td>@app.TeamName</td>
                                        <td>@app.ApplicationDate.ToString("dd.MM.yyyy")</td>
                                        <td>@app.Message</td>
                                        <td>@GetApplicationStatusDisplay(app.Status)</td>
                                        <td>
                                            @if (app.Status == ProjectApplicationStatus.Pending)
                                            {
                                                <button class="btn btn-sm btn-success me-1"
                                                        @onclick="() => ApproveApplication(app.Id)">
                                                    Одобрить
                                                </button>
                                                <button class="btn btn-sm btn-danger"
                                                        @onclick="() => RejectApplication(app.Id)">
                                                    Отклонить
                                                </button>
                                            }
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }
            </div>
        }

        @if (project != null && project.Status == ProjectStatus.New)
        {
            <AuthorizeView Policy="">
                <Authorized>
                    <div class="mt-4">
                        <button class="btn btn-success me-2" @onclick="ApproveProject">
                            Подтвердить (@project.ApprovalCount из 3)
                        </button>
                        <button class="btn btn-warning" @onclick="SendForRevision">
                            Отправить на доработку
                        </button>
                    </div>
                </Authorized>
            </AuthorizeView>
        }
    }
</div>

@code {
    @rendermode InteractiveServer
    private Project? project;
    private string? currentUserTeamId;
    private string? currentUserTeamName;
    private string? currentUserName;
    private bool HasVoted { get; set; }

    private List<ProjectApplication> applications = new();
    private ProjectApplication? existingApplication;
    private string newApplicationMessage = string.Empty;

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    private string GetStatusDisplay(ProjectStatus status)
    {
        return status switch
        {
            ProjectStatus.New => "Новый",
            ProjectStatus.Approved => "Подтвержден",
            ProjectStatus.NeedRevision => "Требует доработки",
            ProjectStatus.Available => "Свободен",
            ProjectStatus.InProgress => "В работе",
            ProjectStatus.Completed => "Завершен",
            _ => "Неизвестно"
        };
    }


    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        project = await context.Project.FirstOrDefaultAsync(m => m.Id == Id);

        if (project is null)
        {
            NavigationManager.NavigateTo("notfound");
            return;
        }

        // Получаем текущего пользователя
        var currentUser = await UserManager.GetUserAsync(HttpContextAccessor.HttpContext.User);
        currentUserName = currentUser?.UserName;

        // Находим команду пользователя (если есть)
        if (currentUser != null)
        {
            using var dbContext = DbFactory.CreateDbContext();
            var teamMember = await dbContext.TeamMembers
                .Include(tm => tm.Command)
                .FirstOrDefaultAsync(tm => tm.UserId == currentUser.Id);

            if (teamMember != null)
            {
                currentUserTeamId = teamMember.CommandId.ToString();
                currentUserTeamName = teamMember.Command?.Name;
            }
        }

        if (currentUser != null && !string.IsNullOrEmpty(currentUser.Id))
        {
            HasVoted = project.ApprovedByExperts?.Contains(currentUser.Id) ?? false;
        }

        if (project != null)
        {
            applications = await context.ProjectApplications
                .Where(a => a.ProjectId == project.Id)
                .ToListAsync();

            if (currentUserTeamId != null)
            {
                existingApplication = applications
                    .FirstOrDefault(a => a.TeamId == currentUserTeamId);
            }
        }
    }

    private string GetApplicationStatusDisplay(ProjectApplicationStatus status)
    {
        return status switch
        {
            ProjectApplicationStatus.Pending => "На рассмотрении",
            ProjectApplicationStatus.Approved => "Одобрена",
            ProjectApplicationStatus.Rejected => "Отклонена",
            _ => "Неизвестно"
        };
    }

    private async Task SubmitApplication()
    {
        if (string.IsNullOrWhiteSpace(newApplicationMessage) ||
            currentUserTeamId == null ||
            currentUserTeamName == null) return;

        using var context = DbFactory.CreateDbContext();

        var application = new ProjectApplication
            {
                ProjectId = project!.Id,
                TeamId = currentUserTeamId,
                TeamName = currentUserTeamName,
                Message = newApplicationMessage,
                Status = ProjectApplicationStatus.Pending
            };

        context.ProjectApplications.Add(application);
        await context.SaveChangesAsync();

        applications.Add(application);
        existingApplication = application;
        newApplicationMessage = string.Empty;
    }

    // Одобрение заявки
    private async Task ApproveApplication(int applicationId)
    {
        using var context = DbFactory.CreateDbContext();

        // Обновляем проект
        var projectToUpdate = await context.Project.FindAsync(project!.Id);
        if (projectToUpdate == null) return;

        var application = await context.ProjectApplications.FindAsync(applicationId);
        if (application == null) return;

        projectToUpdate.Status = ProjectStatus.InProgress;
        projectToUpdate.TakenByTeamId = application.TeamId;
        projectToUpdate.TakenByTeamName = application.TeamName;

        // Обновляем заявку
        application.Status = ProjectApplicationStatus.Approved;

        // Отклоняем остальные заявки
        var otherApplications = context.ProjectApplications
            .Where(a => a.ProjectId == project.Id && a.Id != applicationId);

        foreach (var app in otherApplications)
        {
            app.Status = ProjectApplicationStatus.Rejected;
        }

        // Активируем команду
        var command = await context.Commands
            .FirstOrDefaultAsync(c => c.Id.ToString() == application.TeamId);

        if (command != null)
        {
            command.IsActive = true;
        }

        await context.SaveChangesAsync();

        // Обновляем UI
        project.Status = projectToUpdate.Status;
        project.TakenByTeamId = projectToUpdate.TakenByTeamId;
        project.TakenByTeamName = projectToUpdate.TakenByTeamName;

        applications = await context.ProjectApplications
            .Where(a => a.ProjectId == project.Id)
            .ToListAsync();

        existingApplication = applications
            .FirstOrDefault(a => a.TeamId == currentUserTeamId);
    }

    // Отклонение заявки
    private async Task RejectApplication(int applicationId)
    {
        using var context = DbFactory.CreateDbContext();

        var application = await context.ProjectApplications.FindAsync(applicationId);
        if (application == null) return;

        application.Status = ProjectApplicationStatus.Rejected;
        await context.SaveChangesAsync();

        // Обновляем UI
        applications = applications
            .Select(a => a.Id == applicationId ? application : a)
            .ToList();

        if (currentUserTeamId == application.TeamId)
        {
            existingApplication = application;
        }
    }

    private async Task ApproveProject()
    {
        if (project == null || HasVoted) return;

        using var context = DbFactory.CreateDbContext();
        var projectToUpdate = await context.Project.FindAsync(project.Id);

        if (projectToUpdate == null) return;

        var currentUser = await UserManager.GetUserAsync(HttpContextAccessor.HttpContext.User);

        // Добавляем ID эксперта в список
        projectToUpdate.ApprovedByExperts += $"{currentUser.Id};";
        projectToUpdate.ApprovalCount++;

        // Проверяем достижение лимита подтверждений
        if (projectToUpdate.ApprovalCount >= 3)
        {
            projectToUpdate.Status = ProjectStatus.Approved;
        }

        await context.SaveChangesAsync();

        // Обновляем локальное состояние
        project.ApprovalCount = projectToUpdate.ApprovalCount;
        project.Status = projectToUpdate.Status;
        project.ApprovedByExperts = projectToUpdate.ApprovedByExperts;
        HasVoted = true;

        StateHasChanged();
    }

    private async Task SendForRevision()
    {
        if (project == null) return;

        using var context = DbFactory.CreateDbContext();
        var projectToUpdate = await context.Project.FindAsync(project.Id);

        if (projectToUpdate == null) return;

        // Сбрасываем подтверждения и меняем статус
        projectToUpdate.Status = ProjectStatus.NeedRevision;
        projectToUpdate.ApprovalCount = 0;
        projectToUpdate.ApprovedByExperts = "";

        await context.SaveChangesAsync();

        // Обновляем локальное состояние
        project.Status = projectToUpdate.Status;
        project.ApprovalCount = 0;
        project.ApprovedByExperts = "";
        HasVoted = false;

        StateHasChanged();
    }
}
