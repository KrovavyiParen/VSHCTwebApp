@page "/projects/details"
@using Microsoft.EntityFrameworkCore
@using VSHCTwebApp.Components.Models
@using Microsoft.AspNetCore.Identity;
@using VSHCTwebApp.Data;
@using Microsoft.AspNetCore.Authorization
@inject IAuthorizationService AuthorizationService
@inject IHttpContextAccessor HttpContextAccessor
@inject UserManager<ApplicationUser> UserManager
@inject IDbContextFactory<VSHCTwebApp.Data.VSHCTwebAppContext> DbFactory
@inject NavigationManager NavigationManager


<h1>Подробнее</h1>

<div class="details-container">

    <hr />
    @if (project is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <div class="card shadow-sm p-4 mb-4">
            <!-- Общая карточка с тенью и отступами -->
            <dl class="row">

                <!-- Каждый блок в отдельной строке с отступом -->

                <div class="col-12 mb-3">
                    <dt class="text-primary fw-bold small">Название</dt>
                    <dd class="ms-2 mt-1 fs-5">@project.Title</dd>
                </div>

                <div class="col-12 mb-3">
                    <dt class="text-primary fw-bold small">Проблема</dt>
                    <dd class="ms-2 mt-1 fs-5">@project.Problem</dd>
                </div>
                <div class="col-12 mb-3">
                    <dt class="text-primary fw-bold small">Предлагаемое решение</dt>
                    <dd class="ms-2 mt-1 fs-5">@project.Solution</dd>
                </div>
                <div class="col-12 mb-3">
                    <dt class="text-primary fw-bold small">Ожидаемый результат</dt>
                    <dd class="ms-2 mt-1 fs-5">@project.Result</dd>
                </div>
                <div class="col-12 mb-3">
                    <dt class="text-primary fw-bold small">Описание необходимых ресурсов для реализации</dt>
                    <dd class="ms-2 mt-1 fs-5">@project.DescrNeededResurses</dd>
                </div>
                <div class="col-12 mb-3">
                    <dt class="text-primary fw-bold small">Стек технологий</dt>
                    <dd class="ms-2 mt-1 fs-5">@project.StackTech</dd>
                </div>

                <div class="col-12 mb-3">
                    <dt class="text-primary fw-bold small">Кем создано</dt>
                    <dd class="ms-2 mt-1 fs-5">@project.CreatedBy</dd>
                </div>

                <div class="col-12 mb-3">
                    <dt class="text-primary fw-bold small">Статус проекта</dt>
                    <dd class="ms-2 mt-1 fs-5">
                        @GetStatusDisplay(project.Status)
                        @if (project.Status == ProjectStatus.InProgress && !string.IsNullOrEmpty(project.TakenByTeamName))
                        {
                            <span> (Команда: @project.TakenByTeamName)</span>
                        }
                    </dd>
                </div>
            </dl>

        </div>
        <div class="details-button-container">
            @{
                var currentUser = HttpContextAccessor.HttpContext.User;
                var currentUserName = UserManager.GetUserName(currentUser);
            }

            @if (currentUserName == project.CreatedByEmail)
            {
                <a href="@($"/projects/edit?id={project.Id}")" class="btn btn-primary mb-3">Изменить</a>
            } |
            <a href="@($"/projects")" class="btn btn-primary mb-3">Вернуться</a>
        </div>
        <AuthorizeView Policy="TeamLidOnly">
            <Authorized>
                @if (project.Status == ProjectStatus.Available)
                {
                    <button class="btn btn-success mb-3" @onclick="TakeProject">
                        Взять проект
                    </button>
                }
                else if (project.Status == ProjectStatus.InProgress && project.TakenByTeamId == currentUserTeamId)
                {
                    <button class="btn btn-warning mb-3" @onclick="ReleaseProject">
                        Отказаться от проекта
                    </button>
                }
            </Authorized>
        </AuthorizeView>
        @if (project != null && project.Status == ProjectStatus.New)
        {
            <AuthorizeView Policy="">
                <Authorized>
                    <div class="mt-4">
                        <button class="btn btn-success me-2" @onclick="ApproveProject">
                            Подтвердить (@project.ApprovalCount из 3)
                        </button>
                        <button class="btn btn-warning" @onclick="SendForRevision">
                            Отправить на доработку
                        </button>
                    </div>
                </Authorized>
            </AuthorizeView>
        }
    }
</div>

@code {
    @rendermode InteractiveServer
    private Project? project;
    private string? currentUserTeamId;
    private string? currentUserTeamName;
    private string? currentUserName;
    private bool HasVoted { get; set; }

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    private string GetStatusDisplay(ProjectStatus status)
    {
        return status switch
        {
            ProjectStatus.New => "Новый",
            ProjectStatus.Approved => "Подтвержден",
            ProjectStatus.NeedRevision => "Требует доработки",
            ProjectStatus.Available => "Свободен",
            ProjectStatus.InProgress => "В работе",
            ProjectStatus.Completed => "Завершен",
            _ => "Неизвестно"
        };
    }


    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        project = await context.Project.FirstOrDefaultAsync(m => m.Id == Id);

        if (project is null)
        {
            NavigationManager.NavigateTo("notfound");
            return;
        }

        // Получаем текущего пользователя
        var currentUser = await UserManager.GetUserAsync(HttpContextAccessor.HttpContext.User);
        currentUserName = currentUser?.UserName;

        // Находим команду пользователя (если есть)
        if (currentUser != null)
        {
            using var dbContext = DbFactory.CreateDbContext();
            var teamMember = await dbContext.TeamMembers
                .Include(tm => tm.Command)
                .FirstOrDefaultAsync(tm => tm.UserId == currentUser.Id);

            if (teamMember != null)
            {
                currentUserTeamId = teamMember.CommandId.ToString();
                currentUserTeamName = teamMember.Command?.Name;
            }
        }

        if (currentUser != null && !string.IsNullOrEmpty(currentUser.Id))
        {
            HasVoted = project.ApprovedByExperts?.Contains(currentUser.Id) ?? false;
        }
    }

    private async Task TakeProject()
    {
        if (project == null || string.IsNullOrEmpty(currentUserTeamId) || string.IsNullOrEmpty(currentUserTeamName))
            return;

        using var context = DbFactory.CreateDbContext();
        var projectToUpdate = await context.Project.FirstOrDefaultAsync(p => p.Id == project.Id);

        if (projectToUpdate != null)
        {
            projectToUpdate.Status = ProjectStatus.InProgress;
            projectToUpdate.TakenByTeamId = currentUserTeamId;
            projectToUpdate.TakenByTeamName = currentUserTeamName;

            project.Status = projectToUpdate.Status;
            project.TakenByTeamId = projectToUpdate.TakenByTeamId;
            project.TakenByTeamName = projectToUpdate.TakenByTeamName;

            var currentUser = await UserManager.GetUserAsync(HttpContextAccessor.HttpContext.User);
            var teamMember = await context.TeamMembers
                .Include(tm => tm.Command)
                .FirstOrDefaultAsync(tm => tm.UserId == currentUser.Id);

            var command = await context.Commands.FirstOrDefaultAsync(c => c.Id == teamMember.Command.Id);
            command.IsActive = true;

            await context.SaveChangesAsync();

            StateHasChanged();
        }
    }

    private async Task ReleaseProject()
    {
        if (project == null)
            return;

        using var context = DbFactory.CreateDbContext();
        var projectToUpdate = await context.Project.FirstOrDefaultAsync(p => p.Id == project.Id);

        if (projectToUpdate != null)
        {
            projectToUpdate.Status = ProjectStatus.Available;
            projectToUpdate.TakenByTeamId = null;
            projectToUpdate.TakenByTeamName = null;

            project.Status = projectToUpdate.Status;
            project.TakenByTeamId = projectToUpdate.TakenByTeamId;
            project.TakenByTeamName = projectToUpdate.TakenByTeamName;

            var currentUser = await UserManager.GetUserAsync(HttpContextAccessor.HttpContext.User);
            var teamMember = await context.TeamMembers
                .Include(tm => tm.Command)
                .FirstOrDefaultAsync(tm => tm.UserId == currentUser.Id);

            var command = await context.Commands.FirstOrDefaultAsync(c => c.Id == teamMember.Command.Id);
            command.IsActive = false;

            await context.SaveChangesAsync();

            StateHasChanged();
        }
    }

    private async Task ApproveProject()
    {
        if (project == null || HasVoted) return;

        using var context = DbFactory.CreateDbContext();
        var projectToUpdate = await context.Project.FindAsync(project.Id);

        if (projectToUpdate == null) return;

        var currentUser = await UserManager.GetUserAsync(HttpContextAccessor.HttpContext.User);

        // Добавляем ID эксперта в список
        projectToUpdate.ApprovedByExperts += $"{currentUser.Id};";
        projectToUpdate.ApprovalCount++;

        // Проверяем достижение лимита подтверждений
        if (projectToUpdate.ApprovalCount >= 3)
        {
            projectToUpdate.Status = ProjectStatus.Approved;
        }

        await context.SaveChangesAsync();

        // Обновляем локальное состояние
        project.ApprovalCount = projectToUpdate.ApprovalCount;
        project.Status = projectToUpdate.Status;
        project.ApprovedByExperts = projectToUpdate.ApprovedByExperts;
        HasVoted = true;

        StateHasChanged();
    }

    private async Task SendForRevision()
    {
        if (project == null) return;

        using var context = DbFactory.CreateDbContext();
        var projectToUpdate = await context.Project.FindAsync(project.Id);

        if (projectToUpdate == null) return;

        // Сбрасываем подтверждения и меняем статус
        projectToUpdate.Status = ProjectStatus.NeedRevision;
        projectToUpdate.ApprovalCount = 0;
        projectToUpdate.ApprovedByExperts = "";

        await context.SaveChangesAsync();

        // Обновляем локальное состояние
        project.Status = projectToUpdate.Status;
        project.ApprovalCount = 0;
        project.ApprovedByExperts = "";
        HasVoted = false;

        StateHasChanged();
    }
}
