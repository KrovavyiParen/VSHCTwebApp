@page "/projects"
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using VSHCTwebApp.Components.Models
@using VSHCTwebApp.Data
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IDbContextFactory<VSHCTwebApp.Data.VSHCTwebAppContext> DbFactory
@inject AuthenticationStateProvider AuthProvider


<AuthorizeView Policy="">
    <Authorized>
        <h1>
            Биржа проектов
            <a href="projects/create" class="btn-idea btn-primary" style="float: right;">Добавить проект</a>
        </h1>
    </Authorized>
</AuthorizeView>

@if (isLoading)
{
    <p>Загрузка данных...</p>
}
else
{
<AuthorizeView Policy="">
    <Authorized>
        <!-- Новые проекты -->
        <h2>Новые проекты</h2>
        <QuickGrid Class="table" Items="@NewProjects.AsQueryable()" Pagination="@pagination">
            <TemplateColumn Title="Название" Context="project">
                <a href="@($"projects/details?id={project.Id}")" class="text-decoration-none">@project.Title</a>
            </TemplateColumn>
            <PropertyColumn Property="(p) => p.CreatedBy" Title="Кем создано" />
        </QuickGrid>
    </Authorized>
</AuthorizeView>

<AuthorizeView Policy="">
    <Authorized>
        <!-- Проекты, нуждающиеся в доработке -->
        @if (NeedRevisionProjects?.Any() == true)
        {
            <h2>Требуют доработки</h2>
            <QuickGrid Class="table" Items="@NeedRevisionProjects.AsQueryable()">
                <TemplateColumn Title="Название" Context="project">
                    <a href="@($"projects/details?id={project.Id}")" class="text-decoration-none">@project.Title</a>
                </TemplateColumn>
                <PropertyColumn Property="(p) => p.CreatedBy" Title="Кем создано" />
            </QuickGrid>
        }
    </Authorized>
</AuthorizeView>

<AuthorizeView Policy="">
    <Authorized>
        <!-- Подтвержденные проекты -->
        <h2>Подтвержденные проекты</h2>
        <QuickGrid Class="table" Items="@ConfirmedProjects.AsQueryable()" Pagination="@pagination">
            <TemplateColumn Title="Название" Context="project">
                <a href="@($"projects/details?id={project.Id}")" class="text-decoration-none">@project.Title</a>
            </TemplateColumn>
            <PropertyColumn Property="(p) => p.CreatedBy" Title="Кем создано" />
        </QuickGrid>
    </Authorized>
</AuthorizeView>

<AuthorizeView Policy="">
    <Authorized>
        <!-- Доступные студентам -->
        <h2>Доступные для выполнения</h2>
        <QuickGrid Class="table" Items="@StudentProjects.AsQueryable()" Pagination="@pagination">
            <TemplateColumn Title="Название" Context="project">
                <a href="@($"projects/details?id={project.Id}")" class="text-decoration-none">@project.Title</a>
            </TemplateColumn>
            <PropertyColumn Property="(p) => p.CreatedBy" Title="Кем создано" />
            <TemplateColumn Title="Статус" Context="project">
                <span>@GetStatusDisplayName(project.Status)</span>
            </TemplateColumn>
        </QuickGrid>
    </Authorized>
    <NotAuthorized>
        <h1>Биржа проектов</h1>
        <p>Для просмотра проектов необходимо авторизоваться</p>
    </NotAuthorized>
</AuthorizeView>
}

@code {
    private List<Project> NewProjects = new List<Project>();
    private List<Project> NeedRevisionProjects = new List<Project>();
    private List<Project> ConfirmedProjects = new List<Project>();
    private List<Project> StudentProjects = new List<Project>();
    private PaginationState pagination = new PaginationState { ItemsPerPage = 10 };
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadProjectsAsync();
    }

    private async Task LoadProjectsAsync()
    {
        isLoading = true;
        var authState = await AuthProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var userName = user.Identity?.Name;

        // Параллельная загрузка данных
        var loadTasks = new List<Task>
        {
            LoadProjectsByStatus(ProjectStatus.New, result => NewProjects = result),
            LoadProjectsByStatus(ProjectStatus.Approved, result => ConfirmedProjects = result),
            LoadStudentProjectsAsync(),
            LoadNeedRevisionProjectsAsync(userName)
        };

        await Task.WhenAll(loadTasks);
        isLoading = false;
        StateHasChanged(); // Обновляем интерфейс
    }

    private async Task LoadStudentProjectsAsync()
    {
        using var context = DbFactory.CreateDbContext();
        var now = DateTime.Now;

        StudentProjects = await context.Project
            .Where(p => (p.Status == ProjectStatus.Available ||
                        p.Status == ProjectStatus.InProgress) &&
                        (!p.AvailableUntil.HasValue || p.AvailableUntil > now))
            .ToListAsync();

        // Автоматически возвращаем просроченные проекты
        var expiredProjects = await context.Project
            .Where(p => p.IsManuallyMadeAvailable &&
                       p.AvailableUntil.HasValue &&
                       p.AvailableUntil <= now)
            .ToListAsync();

        foreach (var project in expiredProjects)
        {
            project.Status = ProjectStatus.Approved;
            project.IsManuallyMadeAvailable = false;
        }

        if (expiredProjects.Any())
        {
            await context.SaveChangesAsync();
        }
    }

    private async Task LoadProjectsByStatus(ProjectStatus status, Action<List<Project>> setResult)
    {
        using var context = DbFactory.CreateDbContext();
        var result = await context.Project
            .Where(p => p.Status == status)
            .ToListAsync();
        setResult(result);
    }

    private async Task LoadNeedRevisionProjectsAsync(string userName)
    {
        if (string.IsNullOrEmpty(userName)) return;

        using var context = DbFactory.CreateDbContext();
        var projects = await context.Project
            .Where(p => p.Status == ProjectStatus.NeedRevision && p.CreatedByEmail == userName)
            .ToListAsync();
        NeedRevisionProjects = projects;
    }

    private string GetStatusDisplayName(ProjectStatus status)
    {
        return status switch
        {
            ProjectStatus.Available => "Доступен",
            ProjectStatus.InProgress => "В работе",
            _ => status.ToString()
        };
    }
}