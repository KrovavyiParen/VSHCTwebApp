@page "/projects/create"
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using VSHCTwebApp.Components.Models
@using VSHCTwebApp.Data
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<ApplicationUser> UserManager
@inject IDbContextFactory<VSHCTwebApp.Data.VSHCTwebAppContext> DbFactory
@inject NavigationManager NavigationManager



<h1>Создание проекта</h1>
<hr/>
<div class="container mt-4">
    <div class="card">
        <div class="card-header bg-primary text-white">
            <h2>Новый проект</h2>
        </div>
        <div class="card-body">
            <EditForm method="post" Model="Project" OnValidSubmit="AddProject" FormName="create" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary class="text-danger" role="alert"/>
                <div class="mb-3">
                    <label for="title" class="form-label">Название:</label>
                    <InputText id="title" @bind-Value="Project.Title" class="form-control" aria-required="true" />
                    <ValidationMessage For="() => Project.Title" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="description" class="form-label">Проблема:</label>
                    <InputTextArea id="description" @bind-Value="Project.Problem" class="form-control" aria-required="true" />
                    <ValidationMessage For="() => Project.Problem" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="description" class="form-label">Предлагаемое решение:</label>
                    <InputTextArea id="description" @bind-Value="Project.Solution" class="form-control" aria-required="true" />
                    <ValidationMessage For="() => Project.Solution" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="description" class="form-label">Ожидаемый результат:</label>
                    <InputTextArea id="description" @bind-Value="Project.Result" class="form-control" aria-required="true" />
                    <ValidationMessage For="() => Project.Result" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="description" class="form-label">Описание необходимых ресурсов для реализации:</label>
                    <InputTextArea id="description" @bind-Value="Project.DescrNeededResurses" class="form-control" aria-required="true" />
                    <ValidationMessage For="() => Project.DescrNeededResurses" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="description" class="form-label">Стек технологий:</label>
                    <InputTextArea id="description" @bind-Value="Project.StackTech" class="form-control" aria-required="true" />
                    <ValidationMessage For="() => Project.StackTech" class="text-danger" />
                </div>
                <div class="d-flex justify-content-between mt-4">
                    <button type="submit" class="btn btn-primary">Создать</button>
                    <a href="/projects" class="btn btn-secondary">Вернуться к списку</a>
                </div>
            </EditForm>
        </div>
    </div>
</div>

<div>
    
</div>

@code {
    [SupplyParameterFromForm]
    private Project Project { get; set; } = new();

    private async Task AddProject()
    {
        using var context = DbFactory.CreateDbContext();
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = await UserManager.GetUserAsync(authState.User);

        Project.CreatedBy = $"{user.LastName} {user.FirstName}";
        Project.CreatedByEmail = $"{user.UserName}";
        Project.ApprovedByExperts = "";

        context.Project.Add(Project);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/projects");
    }
}
